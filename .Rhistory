abline(Fit)
abline(fit)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
fit <- nls(formula = Y ~ SSquadp3xs(X, a, b, jp),
data = df)
fit
abline(fit)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
for (i in 1:4) {
print(2^i)
}
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
interations = amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
interations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
interations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation) {
print(paste(hello, name)) #without exclamation
}
else {
print(paste(hello, name, "!")) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. exclamation=TRUE) #test of function
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name)) #without exclamation
}
else {
print(paste(hello, name, "!")) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. TRUE) #test of function
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. exclamation=TRUE) #test of function
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name, "!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
print(paste(hello, name+"!")) #without exclamation
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- name + "!"
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
"sam" + "1"
name <- c(name, "!")
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- c(name, "!")
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- gsub(" ", paste(name, "!"))
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
name <- paste(name, "!", sep="")
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- paste(name, "!", sep="")
print(paste(hello, name, "!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
if(exclamation==TRUE) {
print(paste(hello,"", name, "!", sep="")) #without exclamation
}
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello,"", name, "!", sep="")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello," ", name, "!", sep="")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
hello_world(name="Sam", hellos=c("Yo", "Howdy", "Hey", "Wassup"), amount=3, exclamation=TRUE) #test of function
setwd("C:/Users/samha/Documents/GitHub/d2m-2023-shared")
library(readxl)
library(readxl)
mmdata <- read_excel("MM data.xlsx")
mmdata <- read_excel("MM Data.xlsx")
setwd("C:/Users/samha/Documents/GitHub/d2m-2023-shared/datasets")
library(readxl)
mmdata <- read_excel("MM Data.xlsx")
mmdata
View(mmdata)
mmdata <- mmdata[-1]
read(mmdata)
view(mmdata)
View(mmdata)
mmdata <- mmdata[,-1]
View(mmdata)
mmdata <- mmdata[-1,]
library(readxl)
mmdata <- read_excel("MM Data.xlsx")
mmdata <- mmdata[-1,]
View(mmdata)
library(readxl)
mmdata <- read_csv("MM Data.csv")
mmdata <- read.csv("MM Data.csv")
View(mmdata)
mmdata
mmdata <- as.tibble(mmdata)
mmdata <- tibble(mmdata)
mmdata <- as.tibble(mmdata)
library(tibble)
mmdata <- read.csv("MM Data.csv")
mmdata <- as.tibble(mmdata)
mmdata <- as_tibble(mmdata)
mmdata.long <- mmdata %>%
pivot_longer(cols = c("Red", "Green", "Blue", "Orange", "Yellow", "Brown"),
names_to = "Color", values_to = "Number")
library(tidyr)
mmdata.long <- mmdata %>%
pivot_longer(cols = c("Red", "Green", "Blue", "Orange", "Yellow", "Brown"),
names_to = "Color", values_to = "Number")
mmdata.long
libary(tidyverse)
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/d2m-2023-shared/datasets")
mmdata <- read.csv("MM Data.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata
optdata <- as_tibble(optdata)
write.csv(optdata)
clean_data <- write.csv(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/clean.csv")
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/clean_data.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
View(optdata)
optdata <- read.csv("test.csv")
View(optdata)
optdata <- select(optdata, 3:ncol(optdata))
View(optdata)
optdata <- select(optdata, -starts_with("fir"))
View(optdata)
optdata <- select(optdata, -ends_with("1") | -ends_with("2"))
View(optdata)
optdata <- select(optdata, -ends_with("1" | "2"))
optdata <- select(optdata, -ends_with("1" |) | -ends_with("2"))
optdata <- select(optdata, -ends_with("1") | -ends_with("2"))
View(optdata)
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
View(optdata)
optdata <- select(optdata, 3:ncol(optdata))
View(optdata)
optdata <- select(optdata, 1:2 & 7 & 10 & 14:ncol(optdata))
View(optdata)
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, 1:2 | 7 | 10 | 14:ncol(optdata))
View(optdata)
optdata <- select(optdata, 3:ncol(optdata), 1:2)
View(optdata)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, 1:4 | 7 | 10 | 14:ncol(optdata))
optdata <- select(optdata, 3:ncol(optdata), 1:2)
View(optdata)
optdata <- select(optdata, 5:ncol(optdata), 1:4)
View(optdata)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, 1:2 | 7 | 10 | 14:ncol(optdata))
View(optdata)
View(optdata)
optdata <- select(optdata, 5:ncol(optdata), 1:4)
View(optdata)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
View(optdata)
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
View(optdata)
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
View(optdata)
optdata <- select(optdata, 5:ncol(optdata))
optdata <- select(optdata, 1:2 | 7 | 10 | 14:ncol(optdata))
View(optdata)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 5:ncol(optdata))
View(optdata)
optdata <- select(optdata, 7 | 10 | 14:ncol(optdata))
View(optdata)
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 5:ncol(optdata))
View(optdata)
optdata <- select(optdata, 5 | 8 | 12:ncol(optdata))
View(optdata)
optdata <- select(optdata, 5:ncol(optdata), 1:2)
View(optdata)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
View(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
View(optdata)
optdata <- select(optdata, 5:ncol(optdata))
optdata <- select(optdata, 5 | 8 | 12:ncol(optdata))
View(optdata)
optdata <- select(optdata, 3:ncol(optdata), 1:2)
View(optdata)
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
View(optdata)
optdata <- select(optdata, 1:2, 5:ncol(optdata))
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 5:17, 1:2, 18:ncol(optdata))
optdata <- select(optdata, 5 | 8 | 12:ncol(optdata))
optdata <- select(optdata, 3:8, 9, 1:2)
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
optdata <- read.csv("test.csv")
optdata <- select(optdata, 3:ncol(optdata))
optdata <- select(optdata, -starts_with("fir"))
optdata <- select(optdata, -ends_with("1") & -ends_with("2"))
optdata <- select(optdata, 5:17, 1:2, 18:ncol(optdata))
optdata <- select(optdata, 5 | 8 | 12:ncol(optdata))
optdata <- select(optdata, 3:8, 10:11, 9, 1:2)
optdata <- arrange(optdata, optdata$choice, optdata$expert)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/clean.csv")
optdata <- read.csv("clean.csv")
View(optdata)
optdata <- read.csv("clean.csv") %>% select(-1)
View(optdata)
