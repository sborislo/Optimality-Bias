plot(Y ~ X + X^2)
abline(Y ~ X + X^2)
abline(lm(Y ~ X + X^2))
abline(lm(Y ~ X))
abline(fitted(lm(Y ~ X)))
abline(fitted(lm(Y ~ X)))
abline(fitted(Y, lm(Y ~ X), type="1"))
abline(fitted(Y, lm(Y ~ X), type="1")
ggplot(data = df) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
X <- c(0.035, 0.200, 0.653, 0.643)
Y <- c(0.295, 0.447, 0.850, 0.841)
df <- data.frame(X, Y)
ggplot(data = df) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
abline(fitted(Y, lm(Y ~ X), type="1")
abline(fitted(df$Y, lm(df$Y ~ df$X), type="1")
X2 <- X^2
Y <- c(0.295, 0.447, 0.850, 0.841)
df <- data.frame(X, Y)
ggplot(data = df) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
abline(df$Y ~ df$X + df$X2)
abline(lm(df$Y ~ df$X + df$X2))
fit = lm(df$Y ~ df$X + df$X2)
df <- data.frame(X, X2, Y)
ggplot(data = df) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
fit = lm(df$Y ~ df$X + df$X2)
abline(fit)
curve(predict(fit,newdata=df.frame(wt=x)),add=T)
curve(predict(fit,newdata=df.frame(X=x)),add=T)
?df.frame
library(graphics)
curve(predict(fit,newdata=df.frame(X=x)),add=T)
curve(predict(fit,newdata=data.frame(X=x)),add=T)
ggplot(data = df) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,2))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,1))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,2))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,2))
df <- data.frame(X, X2, Y)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,2))
library(ggplot2)
library(graphics)
X <- c(0.035, 0.200, 0.653, 0.643)
X2 <- X^2
Y <- c(0.295, 0.447, 0.850, 0.841)
df <- data.frame(X, X2, Y)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,2))
library(ggplot2)
library(graphics)
X <- c(0.035, 0.200, 0.653, 0.643)
X2 <- X^2
Y <- c(0.295, 0.447, 0.850, 0.841)
df <- data.frame(X, X2, Y)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,3)) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
Y <- c(0.295, 0.447, 0.850, 0.841)
df <- data.frame(X, X2, Y)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F, method='lm', formula=Y~poly(X,2)) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black", aes(X, Y)) +
stat_smooth(se=F) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
stat_smooth(se=F) +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
library(nlraa)
install.packages("nlraa")
library(graphics)
library(nlraa)
fit <- nls(formula = Y ~ SSquadp3xs(X, a, b, jp),
data = df)
fit
abline(Fit)
abline(fit)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
fit <- nls(formula = Y ~ SSquadp3xs(X, a, b, jp),
data = df)
fit
abline(fit)
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1)) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = df, aes(x=X, y=Y)) +
geom_point(stat = "identity", colour = "black") +
scale_x_continuous(name = "False Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
scale_y_continuous(name = "True Positive Rate", breaks = c(0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9,1), limits = c(0,1), expand = c(0, 0)) +
theme_bw() +
ggtitle("ROC Curve") +
theme(plot.title = element_text(hjust = 0.5))
for (i in 1:4) {
print(2^i)
}
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
interations = amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
interations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
interations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
print(paste(hello, name)) #combine hello type and name
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3)
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation) {
print(paste(hello, name)) #without exclamation
}
else {
print(paste(hello, name, "!")) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. exclamation=TRUE) #test of function
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name)) #without exclamation
}
else {
print(paste(hello, name, "!")) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. TRUE) #test of function
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3. exclamation=TRUE) #test of function
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name, "!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
print(paste(hello, name+"!")) #without exclamation
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- name + "!"
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
"sam" + "1"
name <- c(name, "!")
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- c(name, "!")
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- gsub(" ", paste(name, "!"))
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello, name+"!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
name <- paste(name, "!", sep="")
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
name <- paste(name, "!", sep="")
print(paste(hello, name, "!")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
if(exclamation==TRUE) {
print(paste(hello,"", name, "!", sep="")) #without exclamation
}
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello,"", name, "!", sep="")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
#name is who you are saying hello to, hellos is ways want to say hello, amount is how many times to say hello
hello_world <- function(name, hellos, amount, exclamation) { #name is string, languages is vector, amount is numeric
iterations <- amount #iterations for for loop
manners <- hellos #ways to say hello in for loop
for (i in 1:iterations) { #say hello iterations times
for (hello in manners) { #say hello in each way
if(exclamation==TRUE) {
print(paste(hello," ", name, "!", sep="")) #without exclamation
}
else {
print(paste(hello, name)) #with exclamation
}
}
}
}
hello_world("Sam", c("Yo", "Howdy", "Hey", "Wassup"), 3, exclamation=TRUE) #test of function
hello_world(name="Sam", hellos=c("Yo", "Howdy", "Hey", "Wassup"), amount=3, exclamation=TRUE) #test of function
setwd("C:/Users/samha/Documents/GitHub/d2m-2023-shared")
library(readxl)
library(readxl)
mmdata <- read_excel("MM data.xlsx")
mmdata <- read_excel("MM Data.xlsx")
setwd("C:/Users/samha/Documents/GitHub/d2m-2023-shared/datasets")
library(readxl)
mmdata <- read_excel("MM Data.xlsx")
mmdata
View(mmdata)
mmdata <- mmdata[-1]
read(mmdata)
view(mmdata)
View(mmdata)
mmdata <- mmdata[,-1]
View(mmdata)
mmdata <- mmdata[-1,]
library(readxl)
mmdata <- read_excel("MM Data.xlsx")
mmdata <- mmdata[-1,]
View(mmdata)
library(readxl)
mmdata <- read_csv("MM Data.csv")
mmdata <- read.csv("MM Data.csv")
View(mmdata)
mmdata
mmdata <- as.tibble(mmdata)
mmdata <- tibble(mmdata)
mmdata <- as.tibble(mmdata)
library(tibble)
mmdata <- read.csv("MM Data.csv")
mmdata <- as.tibble(mmdata)
mmdata <- as_tibble(mmdata)
mmdata.long <- mmdata %>%
pivot_longer(cols = c("Red", "Green", "Blue", "Orange", "Yellow", "Brown"),
names_to = "Color", values_to = "Number")
library(tidyr)
mmdata.long <- mmdata %>%
pivot_longer(cols = c("Red", "Green", "Blue", "Orange", "Yellow", "Brown"),
names_to = "Color", values_to = "Number")
mmdata.long
libary(tidyverse)
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/d2m-2023-shared/datasets")
mmdata <- read.csv("MM Data.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata
optdata <- as_tibble(optdata)
write.csv(optdata)
clean_data <- write.csv(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/clean.csv")
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/clean_data.csv")
library(tidyverse)
setwd("C:/Users/samha/Documents/GitHub/Optimality-Bias")
optdata <- read.csv("R_Manuscript_Dataset.csv")
optdata <- as_tibble(optdata)
write.csv(optdata, "C:/Users/samha/Documents/GitHub/Optimality-Bias/test.csv")
